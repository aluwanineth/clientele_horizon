// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Polly_C.Horizon.Data.Polly_C.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Polly_C.Horizon.Data.Polly_C.Models
{
    public partial class Polly_CContext
    {
        private IPolly_CContextProcedures _procedures;

        public virtual IPolly_CContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Polly_CContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPolly_CContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<spDALC_Payment_FreqSelectResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spDALC_SmokerSelectResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetBeneficiaryDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetBenefitExtendedMemberDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetPolicyAndMainMemberDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spNewBusinessProcessResult>().HasNoKey().ToView(null);
        }
    }

    public partial class Polly_CContextProcedures : IPolly_CContextProcedures
    {
        private readonly Polly_CContext _context;

        public Polly_CContextProcedures(Polly_CContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spDALC_Payment_FreqSelectResult>> spDALC_Payment_FreqSelectAsync(short? Payment_Freq_CD, string Short_Desc, int? Disp_Seq, DateTime? Eff_Date, DateTime? Exp_Date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Payment_Freq_CD",
                    Value = Payment_Freq_CD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Short_Desc",
                    Size = 30,
                    Value = Short_Desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Disp_Seq",
                    Value = Disp_Seq ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Eff_Date",
                    Value = Eff_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Exp_Date",
                    Value = Exp_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDALC_Payment_FreqSelectResult>("EXEC @returnValue = [configpr].[spDALC_Payment_FreqSelect] @Payment_Freq_CD, @Short_Desc, @Disp_Seq, @Eff_Date, @Exp_Date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDALC_SmokerSelectResult>> spDALC_SmokerSelectAsync(byte? Smoker_CD, string S_Desc, short? Disp_Seq, DateTime? Eff_Date, DateTime? Exp_Date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Smoker_CD",
                    Value = Smoker_CD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "S_Desc",
                    Size = 30,
                    Value = S_Desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Disp_Seq",
                    Value = Disp_Seq ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Eff_Date",
                    Value = Eff_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Exp_Date",
                    Value = Exp_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDALC_SmokerSelectResult>("EXEC @returnValue = [configpr].[spDALC_SmokerSelect] @Smoker_CD, @S_Desc, @Disp_Seq, @Eff_Date, @Exp_Date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetBeneficiaryDetailsResult>> spGetBeneficiaryDetailsAsync(int? PolicyNO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNO",
                    Value = PolicyNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetBeneficiaryDetailsResult>("EXEC @returnValue = [polmaspr].[spGetBeneficiaryDetails] @PolicyNO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetBenefitExtendedMemberDetailsResult>> spGetBenefitExtendedMemberDetailsAsync(int? PolicyNO, DateTime? EffectiveDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNO",
                    Value = PolicyNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveDate",
                    Value = EffectiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetBenefitExtendedMemberDetailsResult>("EXEC @returnValue = [polmaspr].[spGetBenefitExtendedMemberDetails] @PolicyNO, @EffectiveDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetPolicyAndMainMemberDetailsResult>> spGetPolicyAndMainMemberDetailsAsync(int? PolicyNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetPolicyAndMainMemberDetailsResult>("EXEC @returnValue = [polmaspr].[spGetPolicyAndMainMemberDetails] @PolicyNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spNewBusinessProcessResult>> spNewBusinessProcessAsync(string Source, Guid? MessageID, int? StatusCD, string SalesDivision, string AgentName, string AgentCode, string LegacyPolNo, DateTime? CaptureDate, DateTime? NewInceptDate, string MasterProductCode, string ProductCode, decimal? PolicyPremium, int? PartnerCD, string SchemeCD, int? DebitDay, string BankName, string BranchName, string BranchCode, string AccountNumber, int? PaymentTypeID, int? BankAccTypeCD, string AccountHolder, DateTime? EffectiveDate, DataTable Entity, DataTable Benefit, DataTable MemberAddr, DataTable MemberContact, OutputParameter<string> OutputMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterOutputMessage = new SqlParameter
            {
                ParameterName = "OutputMessage",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = OutputMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 200,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MessageID",
                    Value = MessageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "StatusCD",
                    Value = StatusCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SalesDivision",
                    Size = 10,
                    Value = SalesDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgentName",
                    Size = 200,
                    Value = AgentName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgentCode",
                    Size = 200,
                    Value = AgentCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyPolNo",
                    Size = 20,
                    Value = LegacyPolNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaptureDate",
                    Value = CaptureDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "NewInceptDate",
                    Value = NewInceptDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "MasterProductCode",
                    Size = 10,
                    Value = MasterProductCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductCode",
                    Size = 10,
                    Value = ProductCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyPremium",
                    Precision = 9,
                    Scale = 2,
                    Value = PolicyPremium ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PartnerCD",
                    Value = PartnerCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchemeCD",
                    Size = 10,
                    Value = SchemeCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DebitDay",
                    Value = DebitDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BankName",
                    Size = 50,
                    Value = BankName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchName",
                    Size = 50,
                    Value = BranchName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCode",
                    Size = 10,
                    Value = BranchCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 50,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PaymentTypeID",
                    Value = PaymentTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccTypeCD",
                    Value = BankAccTypeCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccountHolder",
                    Size = 150,
                    Value = AccountHolder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveDate",
                    Value = EffectiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Entity",
                    Value = Entity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[polmas].[Entity]",
                },
                new SqlParameter
                {
                    ParameterName = "Benefit",
                    Value = Benefit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[polmas].[Benefit]",
                },
                new SqlParameter
                {
                    ParameterName = "MemberAddr",
                    Value = MemberAddr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[polmas].[MemberAddr]",
                },
                new SqlParameter
                {
                    ParameterName = "MemberContact",
                    Value = MemberContact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[polmas].[MemberContact]",
                },
                parameterOutputMessage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spNewBusinessProcessResult>("EXEC @returnValue = [polmas].[spNewBusinessProcess] @Source, @MessageID, @StatusCD, @SalesDivision, @AgentName, @AgentCode, @LegacyPolNo, @CaptureDate, @NewInceptDate, @MasterProductCode, @ProductCode, @PolicyPremium, @PartnerCD, @SchemeCD, @DebitDay, @BankName, @BranchName, @BranchCode, @AccountNumber, @PaymentTypeID, @BankAccTypeCD, @AccountHolder, @EffectiveDate, @Entity, @Benefit, @MemberAddr, @MemberContact, @OutputMessage OUTPUT", sqlParameters, cancellationToken);

            OutputMessage.SetValue(parameterOutputMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
